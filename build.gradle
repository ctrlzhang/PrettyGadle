task wrapper(type: Wrapper) {
    gradleVersion = '1.0'
    archiveBase = 'PROJECT'
    archivePath = 'gradle/dists'
}

allprojects {
    apply plugin: 'idea'
}

subprojects {
    apply plugin: 'java'
    repositories {
        mavenCentral()
    }
    ext {
          guavaVersion = ’14.0.1’
          junitVersion = ‘4.10’ 
   } 
 
    dependencies {
        compile(
                “com.google.guava:guava:${guavaVersion}”
        )
        testCompile(
                “junit:junit:${junitVersion}”
        )
    }
}

configure(subprojects.findAll {it.name.contains('war')}) {
    apply plugin: 'war'
}

//checkstyle
apply plugin: 'checkstyle'
task checkstyle(type: Checkstyle) {
    //configFile file("${project.rootDir}/config/checkstyle/google/checkstyle.xml")
    configFile file("${project.rootDir}/config/checkstyle/alibaba/checkstyle.xml")
    source = 'src/main/java'
    include '**/*.java'
    classpath = files()
    ignoreFailures = true
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

apply plugin: 'findbugs'
task findbugs(type: FindBugs, dependsOn: compileJava) {
    classpath = files()
    classes = fileTree("${project.rootDir}/build/classes")
    source ='src/main/java'
    include '**/*.java'
    ignoreFailures = true
    reportLevel = "medium"
    effort = "max"
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

apply plugin: 'pmd'
task pmd (type: Pmd) {
    ruleSets = [
            'java-basic',
            'java-braces',
            'java-clone',
            'java-codesize',
            'java-comments',
            'java-controversial',
            'java-coupling',
            'java-design',
            'java-empty',
            'java-finalizers',
            'java-imports',
            'java-j2ee',
            'java-javabeans',
            'java-junit',
            'java-logging-jakarta-commons',
            'java-logging-java',
            'java-migrating',
            'java-naming',
            'java-optimizations',
            'java-strictexception',
            'java-strings',
            'java-sunsecure',
            'java-typeresolution',
            'java-unnecessary',
            'java-unusedcode'
    ]
    source = fileTree('src')
    ignoreFailures = true
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

task cc << {
    print "code check success"
}

cc.dependsOn 'checkstyle', 'pmd', 'findbugs'
